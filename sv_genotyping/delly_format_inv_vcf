#!/usr/bin/perl
use strict; use warnings;
my $usage='
Tool:        delly_format_inv_vcf
About:       format a vcf for genotyping inversions with delly 

Usage:       delly_format_inv_vcf <vcf> [ct id]

Required Arguments:
    vcf      FILE        sv vcf with inversion calls 

Optional Arguments:
    ct id    STR         connection type INFO id [default: CT]
          
Notes:
    
    if the connection type (3to3,5to5) is not present for
    inversions, then the variant is duplicated as a 3to3
    and a 5to5 call

    required entries in the INFO column are END and SVTYPE

    output is recorded as in.dellyformatted.inv.vcf

Author:
    Danny Antaki, <dantaki at ucsd dot edu>

';

my $vcf = $ARGV[0];
die "\n$usage\n" if(! defined $vcf);
my $CT = $ARGV[1];
$CT = "CT" if(! defined $CT);

my $ovcf = "$vcf";
$ovcf =~ s/\.vcf/\.dellyformatted\.inv\.vcf/;
$ovcf =~ s/\.gz//;
open OUT, ">$ovcf\n"; 
open IN, "/home/dantakli/recipe/vcf_headers/grch37_delly_gt.txt";
while(<IN>){ print OUT $_; } close IN;

open IN, "less $vcf |";
while(<IN>){
	chomp;
	my @r = split /\t/, $_;
	undef my %info;
	if($_ !~ /^\#/){
		my @info = split /\;/, $r[7];
		foreach my $i (@info) { 
			my @i = split /\=/, $i;
			undef my $v;
			if(scalar(@i) == 1) { $v=""; } 
			else { $v=$i[1]; } 
			my $k = $i[0];	
			$info{$k}=$v;
		}
		next if(! exists $info{"SVTYPE"});
		next if($info{"SVTYPE"} ne "INV"); 
		my $method = "EMBL.DELLYv0.8.1";
		my $info = join ";", @info;
		if (! exists $info{"SVMETHOD"}) { $info = "$info;SVMETHOD=$method"; } 
		if (! exists $info{"CHR2"}) { $info = "$info;CHR2=$r[0]"; } 
		if (exists $info{$CT}) {
			$info =~ s/$CT=/CT=/ if($CT ne "CT"); 
			my $o = join "\t", @r[ 0 .. 6], $info; 
			print OUT $o,"\n"; 
		} else { 
			my $o = join "\t", @r[ 0 .. 6]; 
			print OUT "$o\t$info;CT=3to3\n"; 
			print OUT "$o\t$info;CT=5to5\n"; 
		}
	}
}close IN; close OUT; 


warn "  output ---> $ovcf\n"; 
