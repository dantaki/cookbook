#!/usr/bin/perl
use strict; use warnings;
my $usage='
Tool:        veplof
About:       print predicted damaging loss of function 
             annotations from VEP tab-delimited output

Usage:       veplof <vep file> [gnomad cutoff] [columns] 

Required Arguments:
    vep file         FILE     file containing VEP annotations

Options:
    gnomad cutoff    FLOAT    gnomad allele frequency threshold [0.01] 
    columns          STR      comma separated string of extra
                              column keys to print

Notes:
    output is formatted as BED with 0-base positions
    default format: 
      <chrom start end alt;symbol;transcript;pli;gnomad_af>
    
    compress and index output with indexbed 
    
    example of the columns option: 
    <veplof vep.txt 0.9 ALLELE,IMPACT,gnomAD_AF>

    gnomAD_AF is required in the EXTRA column
    use the --af_gnomad option when running vep

Author:
   Danny Antaki, <dantaki at ucsd dot edu>
';

# LOF ANNOTATIONS
# https://uswest.ensembl.org/info/genome/variation/prediction/predicted_data.html
my @lof = qw/
inframe_insertion
inframe_deletion
missense_variant
protein_altering_variant
/;
undef my %lof;
foreach (@lof) { $lof{$_}++; } 

my $vep = $ARGV[0];
die "$usage\n" if(! defined $vep);

my $columns = $ARGV[2];
my $def=1; undef my @cols;
if(defined $columns) { 
	$def=0; 
	@cols = split /,/, $columns;
}

my $af_cut = $ARGV[1];
$af_cut=0.01 if(! defined $af_cut);
# print out lofs
my $var_key="#Uploaded_variation";
my $loc_key="Location";
my $allele_key="Allele";
my $func_key="Consequence";
my $feat_key="Feature";
my $extra_key="Extra";

undef my %col;
open IN, $vep;
while(<IN>){
	chomp;
	next if($_ =~ /^\#\#/);
	my @r = split /\t/, $_;
	if($_ =~ /^#Uploaded_variation/) {
		# check if header is formatted correctly
		for(my $i=0; $i<scalar(@r); $i++) { $col{$r[$i]}=$i; }
		check_ind(\%col,$var_key); check_ind(\%col,$loc_key); check_ind(\%col,$allele_key);
		check_ind(\%col,$func_key); check_ind(\%col,$feat_key); check_ind(\%col,$extra_key);
	} else {
		my $func = $r[$col{$func_key}]; 
		# skip variant if not LoF
		next unless(exists $lof{$func});
		# get transcript and gene symbol ids
		my $trx = $r[$col{$feat_key}];
		my @ext = split /\;/, $r[$col{$extra_key}];
		my $sym = '-9'; # NAN
		# convert extra column to hash
		undef my %ext;
		foreach my $e (@ext) { 
			my ($k,$v) = split /\=/, $e;
			$ext{$k}=$v;
		}
		$sym = $ext{"SYMBOL"} if(exists $ext{"SYMBOL"});
		# allele frequency filter
		my $af = 0;
		$af = $ext{"gnomAD_AF"} if(exists $ext{"gnomAD_AF"});
		next if($af > $af_cut);

		# parse genomic position
		my ($chrom,$pos) = split /:/, $r[$col{$loc_key}];
		my $start = $pos; undef my $end;
		if($start =~ /-/){ 
			($start,$end) = split /-/, $start;
		}
		$end=$start if(! defined $end);
		$start--; # convert 1-base to 0-base
			
		# get alt allele
		my $alt = $r[$col{$allele_key}];
		
		# construct remaining output
		# default [ REF;ALT;SYMBOL;TRANSCRIPT;PLI]
		undef my $out;
		$sym="na" if($sym eq '-9'); 
		$af="nan" if($af == 0);
		if($def==1){ $out = "$alt;$sym;$trx;$af";}	
		else { 
			undef my @out;
			foreach my $col (@cols) { 
				if(exists $ext{$col}) {  push @out, $ext{$col}; }
				elsif(exists $col{$col}) { push @out, $r[$col{$col}]; }
				else { push @out, "na"; } 
			}
			$out = join "\;", @out
		}
		
		# print to stdout
		print "$chrom\t$start\t$end\t$out\n"; 	
	}

}close IN;

sub check_ind {
	my ($col,$key) = @_;
	die "FATAL ERROR: cannot find column '${key}' in header\n" unless(exists $$col{$key});
}
